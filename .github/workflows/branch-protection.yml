name: Branch Protection & PR Management

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  push:
    branches: [main, develop]

jobs:
  branch-protection:
    name: Branch Protection Rules
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate PR Title
      run: |
        # V√©rifier que le titre du PR suit les conventions
        PR_TITLE="${{ github.event.pull_request.title }}"
        
        # Validation en deux √©tapes pour plus de clart√©
        PR_TYPE=$(echo "$PR_TITLE" | cut -d':' -f1)
        
        # V√©rifier le format g√©n√©ral
        if [[ ! "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert): ]]; then
          # V√©rifier si c'est un format avec scope
          if [[ ! "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)\([a-z0-9_-]+\): ]]; then
            echo "‚ùå Le titre du PR doit suivre le format: type(scope): description"
            echo "Exemples: feat(logo): ajouter nouveau style, fix: corriger erreur"
            echo "Formats accept√©s:"
            echo "  - feat(logo): ajouter nouveau style"
            echo "  - fix: corriger erreur"
            echo "  - docs: mise √† jour README"
            echo "  - style: reformater le code"
            exit 1
          fi
        fi
        echo "‚úÖ Titre du PR valide: $PR_TITLE"
        
    - name: Check Branch Naming
      run: |
        # V√©rifier que la branche suit les conventions
        BRANCH_NAME="${{ github.head_ref }}"
        
        # Accepter les branches Dependabot (mises √† jour automatiques de d√©pendances)
        if [[ "$BRANCH_NAME" =~ ^dependabot/ ]]; then
          echo "‚úÖ Branche Dependabot accept√©e: $BRANCH_NAME"
          exit 0
        fi
        
        # Accepter les branches principales (main, develop)
        if [[ "$BRANCH_NAME" =~ ^(main|develop)$ ]]; then
          echo "‚úÖ Branche principale accept√©e: $BRANCH_NAME"
          exit 0
        fi
        
        # Validation des autres branches selon les conventions
        if [[ ! "$BRANCH_NAME" =~ ^(feature|bugfix|hotfix|release|docs|refactor)/[a-z0-9-]+$ ]]; then
          echo "‚ùå Nom de branche invalide: $BRANCH_NAME"
          echo "Format attendu: type/description (ex: feature/new-logo-style)"
          echo "Ou branche Dependabot pour mises √† jour automatiques"
          echo "Ou branche principale (main, develop)"
          exit 1
        fi
        echo "‚úÖ Nom de branche valide: $BRANCH_NAME"
        
    - name: Validate Commit Messages
      run: |
        # V√©rifier que les commits suivent les conventions
        git log --oneline ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | while read commit; do
          if [[ ! "$commit" =~ ^[a-f0-9]{7}\ (feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: ]]; then
            echo "‚ùå Commit invalide: $commit"
            echo "Format attendu: type(scope): description"
            exit 1
          fi
        done
        echo "‚úÖ Tous les commits sont valides"
        
  push-validation:
    name: Push Branch Validation
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate Branch Naming on Push
      run: |
        # V√©rifier que la branche suit les conventions lors d'un push direct
        BRANCH_NAME="${{ github.ref_name }}"
        echo "üîç Validation de la branche: $BRANCH_NAME"
        
        # Accepter les branches Dependabot (mises √† jour automatiques de d√©pendances)
        if [[ "$BRANCH_NAME" =~ ^dependabot/ ]]; then
          echo "‚úÖ Branche Dependabot accept√©e: $BRANCH_NAME"
          exit 0
        fi
        
        # Accepter les branches principales (main, develop)
        if [[ "$BRANCH_NAME" =~ ^(main|develop)$ ]]; then
          echo "‚úÖ Branche principale accept√©e: $BRANCH_NAME"
          exit 0
        fi
        
        # Validation des autres branches selon les conventions
        if [[ ! "$BRANCH_NAME" =~ ^(feature|bugfix|hotfix|release|docs|refactor)/[a-z0-9-]+$ ]]; then
          echo "‚ùå Nom de branche invalide: $BRANCH_NAME"
          echo "Format attendu: type/description (ex: feature/new-logo-style)"
          echo "Ou branche Dependabot pour mises √† jour automatiques"
          echo "Ou branche principale (main, develop)"
          exit 1
        fi
        echo "‚úÖ Nom de branche valide: $BRANCH_NAME"
        
  auto-merge:
    name: Auto-merge PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.auto_merge_enabled
    needs: [branch-protection]
    
    steps:
    - name: Enable auto-merge
      run: |
        gh pr merge --auto --merge "${{ github.event.pull_request.number }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
