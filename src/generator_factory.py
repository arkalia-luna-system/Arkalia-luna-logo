"""
üåô Generator Factory Module
Factory pattern optimis√© pour la cr√©ation des g√©n√©rateurs de logos
"""

from pathlib import Path
from typing import Any, Dict, Optional

from .advanced_logo_generator import AdvancedArkaliaLunaLogo
from .ai_logo_generator import AILogoGenerator
from .ai_moon_generator import AIMoonLogoGenerator
from .cosmic_logo_generator import CosmicLogoGenerator
from .dashboard_generator import DashboardLogoGenerator
from .hyper_ai_generator import HyperAIGenerator
from .logo_generator import ArkaliaLunaLogo
from .realism_max_generator import RealismMaxLogoGenerator
from .simple_advanced_generator import SimpleAdvancedLogoGenerator
from .ultimate_generator import UltimateLogoGenerator
from .ultra_max_generator import UltraMaxLogoGenerator


class LogoGeneratorFactory:
    """Factory optimis√©e pour la cr√©ation des g√©n√©rateurs de logos"""

    # Cache des g√©n√©rateurs pour √©viter la recr√©ation (pattern Singleton)
    _generators_cache: Dict[str, ArkaliaLunaLogo] = {}

    # Mapping des types de g√©n√©rateurs - TOUS h√©ritent maintenant de ArkaliaLunaLogo
    GENERATOR_TYPES = {
        "default": ArkaliaLunaLogo,
        "realism": RealismMaxLogoGenerator,
        "ultra_max": UltraMaxLogoGenerator,
        "simple_advanced": SimpleAdvancedLogoGenerator,
        "dashboard": DashboardLogoGenerator,
        "ai_moon": AIMoonLogoGenerator,  # ‚úÖ Maintenant h√©rite correctement
        "advanced": AdvancedArkaliaLunaLogo,  # ‚úÖ Maintenant h√©rite correctement
        "ultimate": UltimateLogoGenerator,  # üåü NOUVEAU : G√©n√©rateur ULTIME cosmique
        "ai": AILogoGenerator,  # ü§ñ NOUVEAU : G√©n√©rateur IA avec Stable Diffusion
        "cosmic": CosmicLogoGenerator,  # üåå NOUVEAU : G√©n√©rateur COSMIQUE avec sph√®res lumineuses
        "hyper_ai": HyperAIGenerator,  # üß† NOUVEAU : G√©n√©rateur HYPER-IA avec ComfyUI + SDXL + ControlNet
    }

    @classmethod
    def create_generator(
        cls,
        generator_type: str = "default",
        output_dir: Optional[Path] = None,
        use_cache: bool = True,
    ) -> ArkaliaLunaLogo:
        """
        Cr√©e un g√©n√©rateur de logo avec optimisations de performance

        Args:
            generator_type: Type de g√©n√©rateur √† cr√©er
            output_dir: R√©pertoire de sortie personnalis√©
            use_cache: Utilise le cache pour √©viter la recr√©ation

        Returns:
            Instance du g√©n√©rateur configur√©
        """
        # Validation du type de g√©n√©rateur
        if generator_type not in cls.GENERATOR_TYPES:
            raise ValueError(
                f"Type de g√©n√©rateur '{generator_type}' non reconnu. "
                f"Types disponibles: {list(cls.GENERATOR_TYPES.keys())}"
            )

        # Cl√© de cache unique
        cache_key = f"{generator_type}_{output_dir}"

        # V√©rification du cache si activ√©
        if use_cache and cache_key in cls._generators_cache:
            return cls._generators_cache[cache_key]

        # Cr√©ation du g√©n√©rateur
        generator_class = cls.GENERATOR_TYPES[generator_type]
        generator = generator_class(output_dir)

        # Mise en cache si activ√©
        if use_cache:
            cls._generators_cache[cache_key] = generator

        return generator

    @classmethod
    def get_available_generators(cls) -> Dict[str, Dict[str, str]]:
        """Retourne la liste des g√©n√©rateurs disponibles avec descriptions"""
        return {
            "default": {
                "name": "G√©n√©rateur de base",
                "description": "G√©n√©rateur de base standard",
            },
            "realism": {
                "name": "Realism Max",
                "description": "G√©n√©rateur ultra-r√©aliste avec effets organiques",
            },
            "ultra_max": {
                "name": "Ultra Max",
                "description": "G√©n√©rateur ULTRA-MAX avec effets exceptionnels",
            },
            "simple_advanced": {
                "name": "Simple Advanced",
                "description": "G√©n√©rateur simple-advanced √©quilibr√©",
            },
            "dashboard": {
                "name": "Dashboard",
                "description": "G√©n√©rateur dashboard optimis√© interface",
            },
            "ai_moon": {
                "name": "AI Moon",
                "description": "G√©n√©rateur IA avec lune vivante",
            },
            "advanced": {
                "name": "Advanced",
                "description": "G√©n√©rateur avanc√© techno-mystique",
            },
            "ultimate": {
                "name": "Ultimate",
                "description": "üåü G√©n√©rateur ULTIME avec effets cosmiques extr√™mes",
            },
            "ai": {
                "name": "AI Generator",
                "description": "ü§ñ G√©n√©rateur IA avec Stable Diffusion local",
            },
            "cosmic": {
                "name": "Cosmic Sphere",
                "description": "üåå G√©n√©rateur COSMIQUE avec sph√®res lumineuses et r√©seaux neuronaux",
            },
            "hyper_ai": {
                "name": "Hyper AI",
                "description": "üß† G√©n√©rateur HYPER-IA avec ComfyUI + SDXL + ControlNet - INTELLIGENCE EXTR√äME",
            },
        }

    @classmethod
    def clear_cache(cls) -> None:
        """Vide le cache des g√©n√©rateurs"""
        cls._generators_cache.clear()

    @classmethod
    def get_cache_stats(cls) -> Dict[str, Any]:
        """Retourne les statistiques du cache"""
        return {
            "cached_generators": len(cls._generators_cache),
            "cache_keys": list(cls._generators_cache.keys()),
            "memory_usage": "Optimis√© avec pattern Singleton",
        }

    @classmethod
    def create_all_generators(
        cls, output_dir: Optional[Path] = None
    ) -> Dict[str, ArkaliaLunaLogo]:
        """Cr√©e tous les types de g√©n√©rateurs disponibles"""
        generators = {}

        for generator_type in cls.GENERATOR_TYPES:
            try:
                generators[generator_type] = cls.create_generator(
                    generator_type, output_dir, use_cache=False
                )
            except Exception as e:
                # Log de l'erreur mais continue avec les autres
                print(f"‚ö†Ô∏è Erreur cr√©ation g√©n√©rateur '{generator_type}': {e}")
                continue

        return generators

    @classmethod
    def benchmark_generators(
        cls,
        output_dir: Optional[Path] = None,
        variant: str = "serenity",
        size: int = 200,
    ) -> Dict[str, float]:
        """Benchmark de performance de tous les g√©n√©rateurs"""
        import time

        results = {}
        generators = cls.create_all_generators(output_dir)

        for generator_type, generator in generators.items():
            try:
                start_time = time.time()

                # Test de g√©n√©ration - utilise la m√©thode standard maintenant
                if hasattr(generator, f"generate_{generator_type}_logo"):
                    method_name = f"generate_{generator_type}_logo"
                elif hasattr(
                    generator, f"generate_{generator_type.replace('_', '')}_logo"
                ):
                    method_name = f"generate_{generator_type.replace('_', '')}_logo"
                else:
                    # Fallback sur la m√©thode standard (maintenant disponible partout)
                    method_name = "generate_svg_logo"

                method = getattr(generator, method_name)
                method(variant, size)

                end_time = time.time()
                results[generator_type] = end_time - start_time

            except Exception as e:
                results[generator_type] = f"Erreur: {e}"

        return results


# Fonction utilitaire pour cr√©ation rapide
def create_logo_generator(
    generator_type: str = "default", output_dir: Optional[Path] = None
) -> ArkaliaLunaLogo:
    """Fonction utilitaire pour cr√©er rapidement un g√©n√©rateur"""
    return LogoGeneratorFactory.create_generator(generator_type, output_dir)


# Fonction utilitaire pour benchmark rapide
def benchmark_all_generators(output_dir: Optional[Path] = None) -> Dict[str, float]:
    """Fonction utilitaire pour benchmark rapide de tous les g√©n√©rateurs"""
    return LogoGeneratorFactory.benchmark_generators(output_dir)
