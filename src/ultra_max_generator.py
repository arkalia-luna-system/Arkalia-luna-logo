"""
üåô Ultra Max Logo Generator Module
G√©n√©rateur ULTRA-avanc√© des logos Arkalia-LUNA avec effets EXCEPTIONNELS
"""

from pathlib import Path
from typing import Any, Dict, List, Optional

try:
    from .logo_generator import ArkaliaLunaLogo
    from .svg_builder_ultra_max import UltraMaxSVGBuilder
except ImportError:
    # Fallback pour ex√©cution directe
    from logo_generator import ArkaliaLunaLogo
    from svg_builder_ultra_max import UltraMaxSVGBuilder


class UltraMaxLogoGenerator(ArkaliaLunaLogo):
    """G√©n√©rateur ULTRA-avanc√© avec effets EXCEPTIONNELS
    et optimisations de performance"""

    def __init__(self, output_dir: Optional[Path] = None):
        super().__init__(output_dir)
        # Remplace le SVG builder par d√©faut par l'Ultra Max
        self.svg_builder = UltraMaxSVGBuilder(self.variants_manager)
        self.logger.info("üöÄ Ultra Max Generator initialis√© avec succ√®s")

        # Configuration ULTRA-MAX
        self.performance_mode = True
        self.quality_level = 1.0
        self.effects_intensity = 0.95

    def generate_ultra_max_logo(
        self, variant_name: str, size: int = 200, effects_level: float = 0.95
    ) -> Path:
        """G√©n√®re un logo ULTRA-MAX avec niveau d'effets configurable"""
        try:
            self.logger.info(
                f"üöÄ G√©n√©ration logo ULTRA-MAX '{variant_name}' "
                f"effets {effects_level:.2f}"
            )

            # Validation de la variante
            if not self.variants_manager.validate_variant(variant_name):
                raise ValueError(f"Variante '{variant_name}' non reconnue")

            # Construction du chemin de sortie avec suffixe ultra-max
            output_path = (
                self.output_dir / f"arkalia-luna-ultra-max-{variant_name}-{size}.svg"
            )

            # G√©n√©ration avec le builder Ultra Max
            self.svg_builder.save_logo(variant_name, size, output_path)

            self.logger.info(f"‚úÖ Logo ULTRA-MAX g√©n√©r√© : {output_path}")
            return output_path

        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration ULTRA-MAX '{variant_name}': {e}")
            raise

    def generate_all_ultra_max_variants(
        self, size: int = 200, effects_level: float = 0.95
    ) -> List[Path]:
        """G√©n√®re toutes les variantes en mode ULTRA-MAX"""
        try:
            self.logger.info(
                f"üöÄ G√©n√©ration de toutes les variantes ULTRA-MAX "
                f"effets {effects_level:.2f}"
            )

            generated_files = []
            variants = self.variants_manager.list_variants()

            for variant in variants:
                try:
                    output_path = self.generate_ultra_max_logo(
                        variant, size, effects_level
                    )
                    generated_files.append(output_path)
                except Exception as e:
                    self.logger.error(f"‚ùå √âchec variante ULTRA-MAX '{variant}': {e}")
                    continue

            self.logger.info(
                f"‚úÖ G√©n√©ration ULTRA-MAX termin√©e : "
                f"{len(generated_files)}/{len(variants)} logos cr√©√©s"
            )
            return generated_files

        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration ULTRA-MAX globale: {e}")
            raise

    def create_ultra_max_favicon(
        self, variant_name: str, size: int = 32, effects_level: float = 0.95
    ) -> Path:
        """Cr√©e un favicon ULTRA-MAX avec effets exceptionnels"""
        try:
            self.logger.info(
                f"üöÄ Cr√©ation favicon ULTRA-MAX '{variant_name}' "
                f"effets {effects_level:.2f}"
            )

            # Utilise la m√©thode parent mais avec le builder ultra-max
            return super().create_favicon(variant_name, size)

        except Exception as e:
            self.logger.error(
                f"‚ùå Erreur cr√©ation favicon ULTRA-MAX '{variant_name}': {e}"
            )
            raise

    def set_performance_mode(self, enabled: bool = True) -> None:
        """Active/d√©sactive le mode performance ULTRA-MAX"""
        self.performance_mode = enabled
        self.logger.info(
            f"üöÄ Mode performance ULTRA-MAX: {'activ√©' if enabled else 'd√©sactiv√©'}"
        )

    def set_quality_level(self, level: float) -> None:
        """Configure le niveau de qualit√© (0.1 √† 1.0)"""
        if 0.1 <= level <= 1.0:
            self.quality_level = level
            self.logger.info(f"üéØ Qualit√© ULTRA-MAX configur√©e: {level:.2f}")
        else:
            raise ValueError("Niveau de qualit√© doit √™tre entre 0.1 et 1.0")

    def set_effects_intensity(self, intensity: float) -> None:
        """Configure l'intensit√© des effets (0.0 √† 1.0)"""
        if 0.0 <= intensity <= 1.0:
            self.effects_intensity = intensity
            self.logger.info(f"‚ö° Intensit√© des effets ULTRA-MAX: {intensity:.2f}")
        else:
            raise ValueError("Intensit√© des effets doit √™tre entre 0.0 et 1.0")

    def get_performance_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques de performance ULTRA-MAX"""
        return {
            "performance_mode": self.performance_mode,
            "quality_level": self.quality_level,
            "effects_intensity": self.effects_intensity,
            "generator_type": "UltraMax",
            "optimizations": [
                "Gradients optimis√©s",
                "Filtres avanc√©s",
                "Cache intelligent",
            ],
        }
