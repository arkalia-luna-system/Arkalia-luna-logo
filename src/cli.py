"""
üåô CLI Module pour Arkalia-LUNA Logo Generator
Interface en ligne de commande pour la g√©n√©ration de logos
"""

import sys
from pathlib import Path
from typing import Optional

import click
from rich.console import Console
from rich.panel import Panel
from rich.progress import track
from rich.table import Table
from rich.text import Text

from .logo_generator import ArkaliaLunaLogo

# Configuration Rich
console = Console()


def print_banner():
    """Affiche la banni√®re Arkalia-LUNA"""
    banner = Text()
    banner.append("üåô ", style="bold blue")
    banner.append("Arkalia-LUNA Logo Generator", style="bold white")
    banner.append(" v1.0.0", style="dim white")

    panel = Panel(banner, border_style="blue", padding=(1, 2))
    console.print(panel)


def print_error(message: str):
    """Affiche une erreur format√©e"""
    console.print(f"[bold red]‚ùå Erreur :[/bold red] {message}")


def print_success(message: str):
    """Affiche un succ√®s format√©"""
    console.print(f"[bold green]‚úÖ Succ√®s :[/bold green] {message}")


def print_info(message: str):
    """Affiche une information format√©e"""
    console.print(f"[bold blue]‚ÑπÔ∏è  Info :[/bold blue] {message}")


@click.group()
@click.option(
    "--output-dir", "-o", type=click.Path(), help="R√©pertoire de sortie personnalis√©"
)
@click.option("--verbose", "-v", is_flag=True, help="Mode verbeux")
@click.pass_context
def cli(ctx, output_dir: Optional[str], verbose: bool):
    """üåô Arkalia-LUNA Logo Generator - Interface CLI professionnelle"""
    ctx.ensure_object(dict)

    # Configuration du contexte
    ctx.obj["output_dir"] = Path(output_dir) if output_dir else Path("exports")
    ctx.obj["verbose"] = verbose

    # Affichage de la banni√®re
    print_banner()

    # Initialisation du g√©n√©rateur
    try:
        ctx.obj["generator"] = ArkaliaLunaLogo(ctx.obj["output_dir"])
        if verbose:
            print_info(f"R√©pertoire de sortie : {ctx.obj['output_dir']}")
    except Exception as e:
        print_error(f"Impossible d'initialiser le g√©n√©rateur : {e}")
        sys.exit(1)


@cli.command()
@click.pass_context
def info(ctx):
    """Affiche les informations sur toutes les variantes disponibles"""
    try:
        generator = ctx.obj["generator"]
        variants_manager = generator.variants_manager

        # Cr√©ation du tableau
        table = Table(title="üåô Variantes √âmotionnelles Arkalia-LUNA")
        table.add_column("Variante", style="cyan", no_wrap=True)
        table.add_column("Nom", style="magenta")
        table.add_column("Description", style="green")
        table.add_column("Vitesse", style="yellow")
        table.add_column("Intensit√©", style="red")

        for variant_name in variants_manager.list_variants():
            variant = variants_manager.get_variant(variant_name)
            table.add_row(
                variant_name,
                variant.name,
                variant.description,
                f"{variant.animation_speed}x",
                f"{variant.glow_intensity:.1f}",
            )

        console.print(table)

    except Exception as e:
        print_error(f"Impossible d'afficher les informations : {e}")
        sys.exit(1)


@cli.command()
@click.option("--variant", "-v", required=True, help="Nom de la variante")
@click.option("--size", "-s", default=200, help="Taille du logo en pixels")
@click.option("--output", "-o", type=click.Path(), help="Chemin de sortie personnalis√©")
@click.pass_context
def generate(ctx, variant: str, size: int, output: Optional[str]):
    """G√©n√®re un logo SVG pour une variante sp√©cifique"""
    try:
        generator = ctx.obj["generator"]

        # Validation de la variante
        if not generator.validate_variant(variant):
            print_error(f"Variante '{variant}' non reconnue")
            console.print(
                f"Variantes disponibles : {', '.join(generator.list_all_variants())}"
            )
            sys.exit(1)

        # G√©n√©ration du logo
        with console.status(f"[bold blue]G√©n√©ration du logo '{variant}'..."):
            output_path = generator.generate_svg_logo(variant, size)

        print_success("Logo g√©n√©r√© avec succ√®s !")
        console.print(f"üìÅ Fichier : {output_path}")
        console.print(f"üé® Variante : {variant}")
        console.print(f"üìè Taille : {size}x{size} pixels")

        # D√©placement si chemin personnalis√© sp√©cifi√©
        if output:
            custom_path = Path(output)
            custom_path.parent.mkdir(parents=True, exist_ok=True)
            output_path.rename(custom_path)
            console.print(f"üìÅ D√©plac√© vers : {custom_path}")

    except Exception as e:
        print_error(f"Impossible de g√©n√©rer le logo : {e}")
        sys.exit(1)


@cli.command()
@click.option("--size", "-s", default=200, help="Taille des logos en pixels")
@click.option(
    "--parallel", "-p", is_flag=True, help="G√©n√©ration parall√®le (si support√©e)"
)
@click.pass_context
def generate_all(ctx, size: int, parallel: bool):
    """G√©n√®re toutes les variantes du logo"""
    try:
        generator = ctx.obj["generator"]
        variants = generator.list_all_variants()

        console.print(
            f"[bold blue]üé® G√©n√©ration de {len(variants)} variantes "
            f"en taille {size}x{size}...[/bold blue]"
        )

        # G√©n√©ration avec barre de progression
        generated_files = []
        for variant in track(variants, description="G√©n√©ration des logos"):
            try:
                output_path = generator.generate_svg_logo(variant, size)
                generated_files.append(output_path)
                console.print(f"[green]‚úÖ[/green] {variant} : {output_path.name}")
            except Exception as e:
                console.print(f"[red]‚ùå[/red] {variant} : {e}")

        # R√©sum√©
        console.print("\n[bold green]üéâ G√©n√©ration termin√©e ![/bold green]")
        console.print(f"üìÅ {len(generated_files)}/{len(variants)} logos g√©n√©r√©s")
        console.print(f"üìÇ R√©pertoire : {generator.get_output_directory()}")

        # Affichage des fichiers
        if generated_files:
            console.print("\nüìã Fichiers g√©n√©r√©s :")
            for file_path in generated_files:
                console.print(f"  ‚Ä¢ {file_path.name}")

    except Exception as e:
        print_error(f"Impossible de g√©n√©rer tous les logos : {e}")
        sys.exit(1)


@cli.command()
@click.option("--variant", "-v", required=True, help="Nom de la variante")
@click.option("--size", "-s", default=32, help="Taille du favicon en pixels")
@click.option("--output", "-o", type=click.Path(), help="Chemin de sortie personnalis√©")
@click.pass_context
def favicon(ctx, variant: str, size: int, output: Optional[str]):
    """Cr√©e un favicon PNG pour une variante"""
    try:
        generator = ctx.obj["generator"]

        # Validation de la variante
        if not generator.validate_variant(variant):
            print_error(f"Variante '{variant}' non reconnue")
            console.print(
                f"Variantes disponibles : {', '.join(generator.list_all_variants())}"
            )
            sys.exit(1)

        # Cr√©ation du favicon
        with console.status(f"[bold blue]Cr√©ation du favicon '{variant}'..."):
            output_path = generator.create_favicon(variant, size)

        print_success("Favicon g√©n√©r√© avec succ√®s !")
        console.print(f"üìÅ Fichier : {output_path}")
        console.print(f"üé® Variante : {variant}")
        console.print(f"üìè Taille : {size}x{size} pixels")

        # D√©placement si chemin personnalis√© sp√©cifi√©
        if output:
            custom_path = Path(output)
            custom_path.parent.mkdir(parents=True, exist_ok=True)
            output_path.rename(custom_path)
            console.print(f"üìÅ D√©plac√© vers : {custom_path}")

    except Exception as e:
        print_error(f"Impossible de cr√©er le favicon : {e}")
        sys.exit(1)


@cli.command()
@click.option("--size", "-s", default=32, help="Taille des favicons en pixels")
@click.pass_context
def favicon_all(ctx, size: int):
    """Cr√©e des favicons pour toutes les variantes"""
    try:
        generator = ctx.obj["generator"]
        variants = generator.list_all_variants()

        console.print(
            f"[bold blue]üé® Cr√©ation de {len(variants)} favicons "
            f"en taille {size}x{size}...[/bold blue]"
        )

        # Cr√©ation avec barre de progression
        generated_files = []
        for variant in track(variants, description="Cr√©ation des favicons"):
            try:
                output_path = generator.create_favicon(variant, size)
                generated_files.append(output_path)
                console.print(f"[green]‚úÖ[/green] {variant} : {output_path.name}")
            except Exception as e:
                console.print(f"[red]‚ùå[/red] {variant} : {e}")

        # R√©sum√©
        console.print("\n[bold green]üéâ Cr√©ation des favicons termin√©e ![/bold green]")
        console.print(f"üìÅ {len(generated_files)}/{len(variants)} favicons cr√©√©s")

    except Exception as e:
        print_error(f"Impossible de cr√©er tous les favicons : {e}")
        sys.exit(1)


@cli.command()
@click.pass_context
def stats(ctx):
    """Affiche les statistiques de g√©n√©ration"""
    try:
        generator = ctx.obj["generator"]
        stats = generator.get_generation_stats()

        # Cr√©ation du tableau des stats
        table = Table(title="üìä Statistiques de G√©n√©ration")
        table.add_column("M√©trique", style="cyan")
        table.add_column("Valeur", style="green")

        table.add_row("Total fichiers", str(stats["total_files"]))
        table.add_row("Logos SVG", str(stats["svg_logos"]))
        table.add_row("Favicons PNG", str(stats["png_favicons"]))
        table.add_row("R√©pertoire sortie", stats["output_directory"])
        table.add_row("Variantes disponibles", str(stats["available_variants"]))

        console.print(table)

    except Exception as e:
        print_error(f"Impossible de r√©cup√©rer les statistiques : {e}")
        sys.exit(1)


@cli.command()
@click.option("--confirm", is_flag=True, help="Confirmation automatique")
@click.pass_context
def clean(ctx, confirm: bool):
    """Nettoie tous les fichiers g√©n√©r√©s"""
    try:
        generator = ctx.obj["generator"]

        if not confirm:
            console.print(
                "[bold yellow]‚ö†Ô∏è  Attention :[/bold yellow] "
                "Cette action supprimera tous les fichiers g√©n√©r√©s."
            )
            if not click.confirm("Continuer ?"):
                console.print("Op√©ration annul√©e.")
                return

        with console.status("[bold blue]Nettoyage en cours..."):
            count = generator.cleanup_generated_files()

        print_success(f"Nettoyage termin√© ! {count} fichiers supprim√©s.")

    except Exception as e:
        print_error(f"Impossible de nettoyer : {e}")
        sys.exit(1)


@cli.command()
@click.pass_context
def version(ctx):
    """Affiche la version du g√©n√©rateur"""
    from . import __version__

    console.print(
        f"[bold blue]üåô Arkalia-LUNA Logo Generator v{__version__}[/bold blue]"
    )


def main():
    """Point d'entr√©e principal"""
    try:
        cli()
    except KeyboardInterrupt:
        console.print("\n[yellow]Op√©ration interrompue par l'utilisateur.[/yellow]")
        sys.exit(0)
    except Exception as e:
        print_error(f"Erreur fatale : {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
