"""
üåô Simple Advanced Logo Generator Module
G√©n√©rateur de logos simple-advanced avec animations et optimisations
"""

from pathlib import Path
from typing import Any, Dict, List, Optional

try:
    from .logo_generator import ArkaliaLunaLogo
    from .svg_builder_simple_advanced import SimpleAdvancedSVGBuilder
except ImportError:
    # Fallback pour ex√©cution directe
    from logo_generator import ArkaliaLunaLogo
    from svg_builder_simple_advanced import SimpleAdvancedSVGBuilder


class SimpleAdvancedLogoGenerator(ArkaliaLunaLogo):
    """G√©n√©rateur simple-advanced avec √©quilibre performance/qualit√©"""

    def __init__(self, output_dir: Optional[Path] = None):
        super().__init__(output_dir)
        # Remplace le SVG builder par d√©faut par le Simple Advanced
        self.svg_builder = SimpleAdvancedSVGBuilder(self.variants_manager)
        self.logger.info("‚ö° Simple Advanced Generator initialis√© avec succ√®s")

        # Configuration optimis√©e
        self.animation_enabled = True
        self.complexity_level = 0.7
        self.performance_boost = True

    def generate_simple_advanced_logo(
        self, variant_name: str, size: int = 200, complexity: float = 0.7
    ) -> Path:
        """G√©n√®re un logo simple-advanced avec niveau de complexit√© configurable"""
        try:
            self.logger.info(
                f"‚ö° G√©n√©ration logo simple-advanced '{variant_name}' "
                f"complexit√© {complexity:.2f}"
            )

            # Validation de la variante
            if not self.variants_manager.validate_variant(variant_name):
                raise ValueError(f"Variante '{variant_name}' non reconnue")

            # Construction du chemin de sortie avec suffixe simple-advanced
            output_path = (
                self.output_dir
                / f"arkalia-luna-simple-advanced-{variant_name}-{size}.svg"
            )

            # G√©n√©ration avec le builder Simple Advanced
            self.svg_builder.save_logo(variant_name, size, output_path)

            self.logger.info(f"‚úÖ Logo simple-advanced g√©n√©r√© : {output_path}")
            return output_path

        except Exception as e:
            self.logger.error(
                f"‚ùå Erreur g√©n√©ration simple-advanced '{variant_name}': {e}"
            )
            raise

    def generate_all_simple_advanced_variants(
        self, size: int = 200, complexity: float = 0.7
    ) -> List[Path]:
        """G√©n√®re toutes les variantes en mode simple-advanced"""
        try:
            self.logger.info(
                f"‚ö° G√©n√©ration de toutes les variantes simple-advanced "
                f"complexit√© {complexity:.2f}"
            )

            generated_files = []
            variants = self.variants_manager.list_variants()

            for variant in variants:
                try:
                    output_path = self.generate_simple_advanced_logo(
                        variant, size, complexity
                    )
                    generated_files.append(output_path)
                except Exception as e:
                    self.logger.error(
                        f"‚ùå √âchec variante simple-advanced '{variant}': {e}"
                    )
                    continue

            self.logger.info(
                f"‚úÖ G√©n√©ration simple-advanced termin√©e : "
                f"{len(generated_files)}/{len(variants)} logos cr√©√©s"
            )
            return generated_files

        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration simple-advanced globale: {e}")
            raise

    def create_simple_advanced_favicon(
        self, variant_name: str, size: int = 32, complexity: float = 0.7
    ) -> Path:
        """Cr√©e un favicon simple-advanced avec animations"""
        try:
            self.logger.info(
                f"‚ö° Cr√©ation favicon simple-advanced '{variant_name}' "
                f"complexit√© {complexity:.2f}"
            )

            # Utilise la m√©thode parent mais avec le builder simple-advanced
            return super().create_favicon(variant_name, size)

        except Exception as e:
            self.logger.error(
                f"‚ùå Erreur cr√©ation favicon simple-advanced '{variant_name}': {e}"
            )
            raise

    def toggle_animations(self, enabled: bool = True) -> None:
        """Active/d√©sactive les animations"""
        self.animation_enabled = enabled
        self.logger.info(f"‚ö° Animations: {'activ√©es' if enabled else 'd√©sactiv√©es'}")

    def set_complexity_level(self, level: float) -> None:
        """Configure le niveau de complexit√© (0.1 √† 1.0)"""
        if 0.1 <= level <= 1.0:
            self.complexity_level = level
            self.logger.info(f"üéØ Complexit√© simple-advanced: {level:.2f}")
        else:
            raise ValueError("Niveau de complexit√© doit √™tre entre 0.1 et 1.0")

    def toggle_performance_boost(self, enabled: bool = True) -> None:
        """Active/d√©sactive le boost de performance"""
        self.performance_boost = enabled
        self.logger.info(
            f"‚ö° Boost performance: {'activ√©' if enabled else 'd√©sactiv√©'}"
        )

    def get_optimization_stats(self) -> Dict[str, Any]:
        """Retourne les statistiques d'optimisation"""
        return {
            "animation_enabled": self.animation_enabled,
            "complexity_level": self.complexity_level,
            "performance_boost": self.performance_boost,
            "generator_type": "SimpleAdvanced",
            "optimizations": [
                "Gradients simplifi√©s",
                "Filtres optimis√©s",
                "Cache m√©moire",
            ],
        }
