"""
üåô Realism Max Logo Generator Module
G√©n√©rateur de logos ultra-r√©alistes avec effets organiques et IA
"""

from pathlib import Path
from typing import List, Optional

try:
    from .logo_generator import ArkaliaLunaLogo
    from .svg_builder_realism_max import RealismMaxSVGBuilder
except ImportError:
    # Fallback pour ex√©cution directe
    from logo_generator import ArkaliaLunaLogo
    from svg_builder_realism_max import RealismMaxSVGBuilder


class RealismMaxLogoGenerator(ArkaliaLunaLogo):
    """G√©n√©rateur de logos ultra-r√©alistes avec effets organiques"""

    def __init__(self, output_dir: Optional[Path] = None):
        super().__init__(output_dir)
        # Remplace le SVG builder par d√©faut par le Realism Max
        self.svg_builder = RealismMaxSVGBuilder(self.variants_manager)
        self.logger.info("üåô Realism Max Generator initialis√© avec succ√®s")

    def generate_realistic_logo(
        self, variant_name: str, size: int = 200, realism_level: float = 0.95
    ) -> Path:
        """G√©n√®re un logo ultra-r√©aliste avec niveau de r√©alisme configurable"""
        try:
            self.logger.info(
                f"üé® G√©n√©ration logo ultra-r√©aliste '{variant_name}' "
                f"niveau {realism_level:.2f}"
            )

            # Validation de la variante
            if not self.variants_manager.validate_variant(variant_name):
                raise ValueError(f"Variante '{variant_name}' non reconnue")

            # Construction du chemin de sortie avec suffixe r√©alisme
            output_path = (
                self.output_dir / f"arkalia-luna-realism-{variant_name}-{size}.svg"
            )

            # G√©n√©ration avec le builder Realism Max
            self.svg_builder.save_logo(variant_name, size, output_path)

            self.logger.info(f"‚úÖ Logo ultra-r√©aliste g√©n√©r√© : {output_path}")
            return output_path

        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration r√©aliste '{variant_name}': {e}")
            raise

    def generate_all_realistic_variants(
        self, size: int = 200, realism_level: float = 0.95
    ) -> List[Path]:
        """G√©n√®re toutes les variantes en mode ultra-r√©aliste"""
        try:
            self.logger.info(
                f"üé® G√©n√©ration de toutes les variantes ultra-r√©alistes "
                f"niveau {realism_level:.2f}"
            )

            generated_files = []
            variants = self.variants_manager.list_variants()

            for variant in variants:
                try:
                    output_path = self.generate_realistic_logo(
                        variant, size, realism_level
                    )
                    generated_files.append(output_path)
                except Exception as e:
                    self.logger.error(f"‚ùå √âchec variante r√©aliste '{variant}': {e}")
                    continue

            self.logger.info(
                f"‚úÖ G√©n√©ration r√©aliste termin√©e : "
                f"{len(generated_files)}/{len(variants)} logos cr√©√©s"
            )
            return generated_files

        except Exception as e:
            self.logger.error(f"‚ùå Erreur g√©n√©ration r√©aliste globale: {e}")
            raise

    def create_realistic_favicon(
        self, variant_name: str, size: int = 32, realism_level: float = 0.95
    ) -> Path:
        """Cr√©e un favicon ultra-r√©aliste avec effets organiques"""
        try:
            self.logger.info(
                f"üé® Cr√©ation favicon ultra-r√©aliste '{variant_name}' "
                f"niveau {realism_level:.2f}"
            )

            # Utilise la m√©thode parent mais avec le builder r√©aliste
            return super().create_favicon(variant_name, size)

        except Exception as e:
            self.logger.error(
                f"‚ùå Erreur cr√©ation favicon r√©aliste '{variant_name}': {e}"
            )
            raise
