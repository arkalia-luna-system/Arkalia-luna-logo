#!/bin/bash

# üöÄ Script d'Initialisation GitHub - Arkalia-LUNA Logo Generator
# Ce script configure le repository GitHub avec la structure de branches professionnelle

set -e  # Arr√™t en cas d'erreur

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction d'affichage
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# V√©rification des pr√©requis
check_prerequisites() {
    print_status "V√©rification des pr√©requis..."
    
    # V√©rifier Git
    if ! command -v git &> /dev/null; then
        print_error "Git n'est pas install√©. Veuillez l'installer d'abord."
        exit 1
    fi
    
    # V√©rifier Python
    if ! command -v python3 &> /dev/null; then
        print_error "Python3 n'est pas install√©. Veuillez l'installer d'abord."
        exit 1
    fi
    
    # V√©rifier Make
    if ! command -v make &> /dev/null; then
        print_warning "Make n'est pas install√©. Certaines commandes ne fonctionneront pas."
    fi
    
    print_success "Pr√©requis v√©rifi√©s"
}

# V√©rification de l'√©tat Git
check_git_status() {
    print_status "V√©rification de l'√©tat Git..."
    
    if [ ! -d ".git" ]; then
        print_error "Ce r√©pertoire n'est pas un repository Git."
        print_status "Initialisation du repository Git..."
        git init
    fi
    
    # V√©rifier s'il y a des changements non commit√©s
    if [ -n "$(git status --porcelain)" ]; then
        print_warning "Il y a des changements non commit√©s. Voulez-vous les commiter ? (y/n)"
        read -r response
        if [[ "$response" =~ ^[Yy]$ ]]; then
            git add .
            git commit -m "chore(ci): configuration initiale GitHub"
        else
            print_error "Veuillez commiter ou stasher vos changements avant de continuer."
            exit 1
        fi
    fi
    
    print_success "√âtat Git v√©rifi√©"
}

# Configuration des branches
setup_branches() {
    print_status "Configuration des branches..."
    
    # V√©rifier la branche actuelle
    current_branch=$(git branch --show-current)
    print_status "Branche actuelle : $current_branch"
    
    # Cr√©er la branche develop si elle n'existe pas
    if ! git branch | grep -q "develop"; then
        print_status "Cr√©ation de la branche develop..."
        git checkout -b develop
        print_success "Branche develop cr√©√©e"
    else
        print_status "Branche develop existe d√©j√†, passage dessus..."
        git checkout develop
    fi
    
    # Retourner sur la branche principale
    if [ "$current_branch" != "main" ] && [ "$current_branch" != "master" ]; then
        git checkout "$current_branch"
    fi
    
    print_success "Branches configur√©es"
}

# Configuration des remotes
setup_remotes() {
    print_status "Configuration des remotes..."
    
    # V√©rifier si origin existe
    if ! git remote | grep -q "origin"; then
        print_status "Configuration du remote origin..."
        echo "Veuillez entrer l'URL du repository GitHub :"
        echo "Exemple : https://github.com/username/arkalia-luna-logo.git"
        read -r github_url
        
        if [ -n "$github_url" ]; then
            git remote add origin "$github_url"
            print_success "Remote origin configur√© : $github_url"
        else
            print_warning "Aucune URL fournie, remote origin non configur√©"
        fi
    else
        print_status "Remote origin existe d√©j√†"
        git remote -v
    fi
}

# Configuration des hooks pre-commit
setup_pre_commit() {
    print_status "Configuration des hooks pre-commit..."
    
    if command -v make &> /dev/null; then
        print_status "Installation des hooks pre-commit..."
        make pre-commit-install
        print_success "Hooks pre-commit install√©s"
    else
        print_warning "Make non disponible, installation manuelle des hooks..."
        print_status "Ex√©cutez : pip install pre-commit && pre-commit install"
    fi
}

# Tests de validation
run_validation_tests() {
    print_status "Ex√©cution des tests de validation..."
    
    if command -v make &> /dev/null; then
        print_status "Tests de qualit√©..."
        make quality-check || {
            print_warning "Certains tests de qualit√© ont √©chou√©, mais la configuration continue..."
        }
        
        print_status "Tests unitaires..."
        make test || {
            print_warning "Certains tests ont √©chou√©, mais la configuration continue..."
        }
    else
        print_warning "Make non disponible, tests non ex√©cut√©s"
    fi
    
    print_success "Tests de validation termin√©s"
}

# Configuration des branches prot√©g√©es (instructions)
show_branch_protection_instructions() {
    print_status "Configuration des branches prot√©g√©es..."
    
    cat << 'EOF'

üåø CONFIGURATION DES BRANCHES PROT√âG√âES

Pour configurer la protection des branches sur GitHub :

1. Allez sur GitHub ‚Üí Settings ‚Üí Branches
2. Ajoutez une r√®gle pour 'main' :
   ‚úÖ Require a pull request before merging
   ‚úÖ Require approvals (2 reviewers)
   ‚úÖ Require status checks to pass before merging
   ‚úÖ Require branches to be up to date before merging
   ‚úÖ Include administrators

3. Ajoutez une r√®gle pour 'develop' :
   ‚úÖ Require a pull request before merging
   ‚úÖ Require approvals (1 reviewer)
   ‚úÖ Require status checks to pass before merging
   ‚úÖ Require branches to be up to date before merging

4. Status checks requis :
   ‚úÖ quality
   ‚úÖ test
   ‚úÖ build

EOF
}

# Configuration des labels GitHub
show_labels_instructions() {
    print_status "Configuration des labels GitHub..."
    
    cat << 'EOF'

üè∑Ô∏è CONFIGURATION DES LABELS

Pour configurer les labels sur GitHub :

1. Allez sur GitHub ‚Üí Issues ‚Üí Labels
2. Cliquez sur "New label" pour chaque label
3. Ou utilisez l'API GitHub pour cr√©er tous les labels d'un coup

Labels principaux √† cr√©er :
- bug (rouge)
- enhancement (bleu)
- documentation (bleu)
- good first issue (violet)
- help wanted (vert)
- priority: critical/high/medium/low
- component: logo-generation/cli/web-interface/tests/docs
- status: needs-triage/in-progress/ready-for-review

EOF
}

# Instructions finales
show_final_instructions() {
    print_status "Configuration termin√©e !"
    
    cat << 'EOF'

üöÄ PROCHAINES √âTAPES

1. Poussez vos branches sur GitHub :
   git push -u origin main
   git push -u origin develop

2. Activez GitHub Actions dans Settings ‚Üí Actions

3. Configurez les branches prot√©g√©es (voir instructions ci-dessus)

4. Cr√©ez votre premi√®re Pull Request :
   git checkout -b feature/initial-setup
   # ... modifications ...
   git commit -m "feat(ci): configuration initiale GitHub"
   git push origin feature/initial-setup

5. Cr√©ez la PR sur GitHub vers develop

6. Pour la premi√®re release :
   git checkout develop
   git checkout -b release/v2.0.0
   # ... finalisation ...
   git commit -m "chore(release): pr√©parer release v2.0.0"
   git push origin release/v2.0.0
   # Cr√©er PR release/v2.0.0 ‚Üí main

üìö DOCUMENTATION DISPONIBLE

- .github/BRANCHES.md : Gestion des branches
- .github/DEPLOYMENT.md : Guide de d√©ploiement
- docs/CONTRIBUTING.md : Guide de contribution
- docs/ARCHITECTURE.md : Architecture technique

üéØ COMMANDES UTILES

make test          # Tests complets
make quality-check # Qualit√© compl√®te
make format        # Formatage du code
make lint          # V√©rification du style

EOF
}

# Fonction principale
main() {
    echo "üöÄ Configuration GitHub - Arkalia-LUNA Logo Generator"
    echo "=================================================="
    echo ""
    
    check_prerequisites
    check_git_status
    setup_branches
    setup_remotes
    setup_pre_commit
    run_validation_tests
    show_branch_protection_instructions
    show_labels_instructions
    show_final_instructions
    
    print_success "Configuration GitHub termin√©e avec succ√®s !"
}

# Ex√©cution du script
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
