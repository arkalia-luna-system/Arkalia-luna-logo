#!/usr/bin/env python3
"""
Script pour g√©n√©rer des logos de d√©monstration pour le GIF anim√©
"""

import json
import time
from pathlib import Path

import requests

# Configuration
API_BASE = "http://localhost:8000"
OUTPUT_DIR = Path("exports/demo-gif")


def generate_logo(variant, size=200, generator_type="simple"):
    """G√©n√®re un logo via l'API"""
    url = f"{API_BASE}/generate"
    data = {"variant": variant, "size": size, "generator_type": generator_type}

    print(f"üé® G√©n√©ration logo {variant}...")
    start_time = time.time()

    response = requests.post(url, json=data)
    end_time = time.time()

    if response.status_code == 200:
        result = response.json()
        duration = end_time - start_time
        print(f"‚úÖ {variant} g√©n√©r√© en {duration:.3f}s")
        return result
    else:
        print(f"‚ùå Erreur g√©n√©ration {variant}: {response.status_code}")
        return None


def main():
    """G√©n√®re une s√©rie de logos pour le GIF"""
    print("üé¨ G√©n√©ration des logos pour le GIF anim√©...")

    # Cr√©er le dossier de sortie
    OUTPUT_DIR.mkdir(exist_ok=True)

    # Variantes √† g√©n√©rer (dans l'ordre du GIF)
    variants = [
        "serenity",  # 1. S√©r√©nit√© - calme
        "power",  # 2. Puissance - √©nergique
        "mystery",  # 3. Myst√®re - myst√©rieux
        "awakening",  # 4. √âveil - lumineux
        "creative",  # 5. Cr√©atif - color√©
    ]

    results = []

    for i, variant in enumerate(variants, 1):
        print(f"\nüì∏ Logo {i}/5: {variant}")
        result = generate_logo(variant)
        if result:
            results.append(
                {
                    "variant": variant,
                    "file": result["file_path"],
                    "duration": result["generation_time"],
                }
            )

        # Pause entre les g√©n√©rations pour l'animation
        time.sleep(0.5)

    # R√©sum√©
    print(f"\nüéâ {len(results)} logos g√©n√©r√©s avec succ√®s !")
    print("üìÅ Fichiers dans exports/demo-gif/")

    # Sauvegarder la liste pour r√©f√©rence
    with open(OUTPUT_DIR / "generated_logos.json", "w") as f:
        json.dump(results, f, indent=2)

    return results


if __name__ == "__main__":
    main()
